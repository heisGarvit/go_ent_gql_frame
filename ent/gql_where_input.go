// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"project/ent/company"
	"project/ent/permission"
	"project/ent/predicate"
	"project/ent/role"
	"project/ent/rolepermission"
	"project/ent/user"
	"project/utils/entFields"
	"time"

	"github.com/google/uuid"
)

// CompanyWhereInput represents a where input for filtering Company queries.
type CompanyWhereInput struct {
	Predicates []predicate.Company  `json:"-"`
	Not        *CompanyWhereInput   `json:"not,omitempty"`
	Or         []*CompanyWhereInput `json:"or,omitempty"`
	And        []*CompanyWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "company_id" field predicates.
	CompanyID       *uuid.UUID  `json:"companyID,omitempty"`
	CompanyIDNEQ    *uuid.UUID  `json:"companyIDNEQ,omitempty"`
	CompanyIDIn     []uuid.UUID `json:"companyIDIn,omitempty"`
	CompanyIDNotIn  []uuid.UUID `json:"companyIDNotIn,omitempty"`
	CompanyIDGT     *uuid.UUID  `json:"companyIDGT,omitempty"`
	CompanyIDGTE    *uuid.UUID  `json:"companyIDGTE,omitempty"`
	CompanyIDLT     *uuid.UUID  `json:"companyIDLT,omitempty"`
	CompanyIDLTE    *uuid.UUID  `json:"companyIDLTE,omitempty"`
	CompanyIDIsNil  bool        `json:"companyIDIsNil,omitempty"`
	CompanyIDNotNil bool        `json:"companyIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "is_disabled" field predicates.
	IsDisabled    *bool `json:"isDisabled,omitempty"`
	IsDisabledNEQ *bool `json:"isDisabledNEQ,omitempty"`

	// "owner_id" field predicates.
	OwnerID       *uuid.UUID  `json:"ownerID,omitempty"`
	OwnerIDNEQ    *uuid.UUID  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn     []uuid.UUID `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn  []uuid.UUID `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT     *uuid.UUID  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE    *uuid.UUID  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT     *uuid.UUID  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE    *uuid.UUID  `json:"ownerIDLTE,omitempty"`
	OwnerIDIsNil  bool        `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil bool        `json:"ownerIDNotNil,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`

	// "roles" edge predicates.
	HasRoles     *bool             `json:"hasRoles,omitempty"`
	HasRolesWith []*RoleWhereInput `json:"hasRolesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CompanyWhereInput) AddPredicates(predicates ...predicate.Company) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CompanyWhereInput filter on the CompanyQuery builder.
func (i *CompanyWhereInput) Filter(q *CompanyQuery) (*CompanyQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCompanyWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCompanyWhereInput is returned in case the CompanyWhereInput is empty.
var ErrEmptyCompanyWhereInput = errors.New("ent: empty predicate CompanyWhereInput")

// P returns a predicate for filtering companies.
// An error is returned if the input is empty or invalid.
func (i *CompanyWhereInput) P() (predicate.Company, error) {
	var predicates []predicate.Company
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, company.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Company, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, company.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Company, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, company.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, company.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, company.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, company.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, company.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, company.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, company.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, company.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, company.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, company.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, company.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, company.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, company.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, company.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, company.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, company.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, company.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, company.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, company.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, company.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, company.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, company.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, company.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, company.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, company.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CompanyID != nil {
		predicates = append(predicates, company.CompanyIDEQ(*i.CompanyID))
	}
	if i.CompanyIDNEQ != nil {
		predicates = append(predicates, company.CompanyIDNEQ(*i.CompanyIDNEQ))
	}
	if len(i.CompanyIDIn) > 0 {
		predicates = append(predicates, company.CompanyIDIn(i.CompanyIDIn...))
	}
	if len(i.CompanyIDNotIn) > 0 {
		predicates = append(predicates, company.CompanyIDNotIn(i.CompanyIDNotIn...))
	}
	if i.CompanyIDGT != nil {
		predicates = append(predicates, company.CompanyIDGT(*i.CompanyIDGT))
	}
	if i.CompanyIDGTE != nil {
		predicates = append(predicates, company.CompanyIDGTE(*i.CompanyIDGTE))
	}
	if i.CompanyIDLT != nil {
		predicates = append(predicates, company.CompanyIDLT(*i.CompanyIDLT))
	}
	if i.CompanyIDLTE != nil {
		predicates = append(predicates, company.CompanyIDLTE(*i.CompanyIDLTE))
	}
	if i.CompanyIDIsNil {
		predicates = append(predicates, company.CompanyIDIsNil())
	}
	if i.CompanyIDNotNil {
		predicates = append(predicates, company.CompanyIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, company.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, company.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, company.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, company.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, company.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, company.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, company.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, company.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, company.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, company.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, company.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, company.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, company.NameContainsFold(*i.NameContainsFold))
	}
	if i.IsDisabled != nil {
		predicates = append(predicates, company.IsDisabledEQ(*i.IsDisabled))
	}
	if i.IsDisabledNEQ != nil {
		predicates = append(predicates, company.IsDisabledNEQ(*i.IsDisabledNEQ))
	}
	if i.OwnerID != nil {
		predicates = append(predicates, company.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, company.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, company.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, company.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, company.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, company.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, company.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, company.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, company.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, company.OwnerIDNotNil())
	}

	if i.HasUsers != nil {
		p := company.HasUsers()
		if !*i.HasUsers {
			p = company.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, company.HasUsersWith(with...))
	}
	if i.HasRoles != nil {
		p := company.HasRoles()
		if !*i.HasRoles {
			p = company.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRolesWith) > 0 {
		with := make([]predicate.Role, 0, len(i.HasRolesWith))
		for _, w := range i.HasRolesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRolesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, company.HasRolesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCompanyWhereInput
	case 1:
		return predicates[0], nil
	default:
		return company.And(predicates...), nil
	}
}

// PermissionWhereInput represents a where input for filtering Permission queries.
type PermissionWhereInput struct {
	Predicates []predicate.Permission  `json:"-"`
	Not        *PermissionWhereInput   `json:"not,omitempty"`
	Or         []*PermissionWhereInput `json:"or,omitempty"`
	And        []*PermissionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "company_id" field predicates.
	CompanyID       *uuid.UUID  `json:"companyID,omitempty"`
	CompanyIDNEQ    *uuid.UUID  `json:"companyIDNEQ,omitempty"`
	CompanyIDIn     []uuid.UUID `json:"companyIDIn,omitempty"`
	CompanyIDNotIn  []uuid.UUID `json:"companyIDNotIn,omitempty"`
	CompanyIDGT     *uuid.UUID  `json:"companyIDGT,omitempty"`
	CompanyIDGTE    *uuid.UUID  `json:"companyIDGTE,omitempty"`
	CompanyIDLT     *uuid.UUID  `json:"companyIDLT,omitempty"`
	CompanyIDLTE    *uuid.UUID  `json:"companyIDLTE,omitempty"`
	CompanyIDIsNil  bool        `json:"companyIDIsNil,omitempty"`
	CompanyIDNotNil bool        `json:"companyIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "read" field predicates.
	Read    *bool `json:"read,omitempty"`
	ReadNEQ *bool `json:"readNEQ,omitempty"`

	// "write" field predicates.
	Write    *bool `json:"write,omitempty"`
	WriteNEQ *bool `json:"writeNEQ,omitempty"`

	// "patch" field predicates.
	Patch    *bool `json:"patch,omitempty"`
	PatchNEQ *bool `json:"patchNEQ,omitempty"`

	// "delete" field predicates.
	Delete    *bool `json:"delete,omitempty"`
	DeleteNEQ *bool `json:"deleteNEQ,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PermissionWhereInput) AddPredicates(predicates ...predicate.Permission) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PermissionWhereInput filter on the PermissionQuery builder.
func (i *PermissionWhereInput) Filter(q *PermissionQuery) (*PermissionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPermissionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPermissionWhereInput is returned in case the PermissionWhereInput is empty.
var ErrEmptyPermissionWhereInput = errors.New("ent: empty predicate PermissionWhereInput")

// P returns a predicate for filtering permissions.
// An error is returned if the input is empty or invalid.
func (i *PermissionWhereInput) P() (predicate.Permission, error) {
	var predicates []predicate.Permission
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, permission.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Permission, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, permission.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Permission, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, permission.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, permission.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, permission.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, permission.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, permission.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, permission.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, permission.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, permission.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, permission.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, permission.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, permission.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, permission.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, permission.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, permission.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, permission.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, permission.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, permission.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, permission.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, permission.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, permission.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, permission.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, permission.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, permission.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, permission.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, permission.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CompanyID != nil {
		predicates = append(predicates, permission.CompanyIDEQ(*i.CompanyID))
	}
	if i.CompanyIDNEQ != nil {
		predicates = append(predicates, permission.CompanyIDNEQ(*i.CompanyIDNEQ))
	}
	if len(i.CompanyIDIn) > 0 {
		predicates = append(predicates, permission.CompanyIDIn(i.CompanyIDIn...))
	}
	if len(i.CompanyIDNotIn) > 0 {
		predicates = append(predicates, permission.CompanyIDNotIn(i.CompanyIDNotIn...))
	}
	if i.CompanyIDGT != nil {
		predicates = append(predicates, permission.CompanyIDGT(*i.CompanyIDGT))
	}
	if i.CompanyIDGTE != nil {
		predicates = append(predicates, permission.CompanyIDGTE(*i.CompanyIDGTE))
	}
	if i.CompanyIDLT != nil {
		predicates = append(predicates, permission.CompanyIDLT(*i.CompanyIDLT))
	}
	if i.CompanyIDLTE != nil {
		predicates = append(predicates, permission.CompanyIDLTE(*i.CompanyIDLTE))
	}
	if i.CompanyIDIsNil {
		predicates = append(predicates, permission.CompanyIDIsNil())
	}
	if i.CompanyIDNotNil {
		predicates = append(predicates, permission.CompanyIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, permission.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, permission.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, permission.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, permission.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, permission.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, permission.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, permission.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, permission.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, permission.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, permission.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, permission.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, permission.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, permission.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, permission.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, permission.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, permission.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, permission.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, permission.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, permission.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, permission.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, permission.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, permission.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, permission.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, permission.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, permission.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, permission.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Read != nil {
		predicates = append(predicates, permission.ReadEQ(*i.Read))
	}
	if i.ReadNEQ != nil {
		predicates = append(predicates, permission.ReadNEQ(*i.ReadNEQ))
	}
	if i.Write != nil {
		predicates = append(predicates, permission.WriteEQ(*i.Write))
	}
	if i.WriteNEQ != nil {
		predicates = append(predicates, permission.WriteNEQ(*i.WriteNEQ))
	}
	if i.Patch != nil {
		predicates = append(predicates, permission.PatchEQ(*i.Patch))
	}
	if i.PatchNEQ != nil {
		predicates = append(predicates, permission.PatchNEQ(*i.PatchNEQ))
	}
	if i.Delete != nil {
		predicates = append(predicates, permission.DeleteEQ(*i.Delete))
	}
	if i.DeleteNEQ != nil {
		predicates = append(predicates, permission.DeleteNEQ(*i.DeleteNEQ))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPermissionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return permission.And(predicates...), nil
	}
}

// RoleWhereInput represents a where input for filtering Role queries.
type RoleWhereInput struct {
	Predicates []predicate.Role  `json:"-"`
	Not        *RoleWhereInput   `json:"not,omitempty"`
	Or         []*RoleWhereInput `json:"or,omitempty"`
	And        []*RoleWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "company_id" field predicates.
	CompanyID       *uuid.UUID  `json:"companyID,omitempty"`
	CompanyIDNEQ    *uuid.UUID  `json:"companyIDNEQ,omitempty"`
	CompanyIDIn     []uuid.UUID `json:"companyIDIn,omitempty"`
	CompanyIDNotIn  []uuid.UUID `json:"companyIDNotIn,omitempty"`
	CompanyIDIsNil  bool        `json:"companyIDIsNil,omitempty"`
	CompanyIDNotNil bool        `json:"companyIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "company" edge predicates.
	HasCompany     *bool                `json:"hasCompany,omitempty"`
	HasCompanyWith []*CompanyWhereInput `json:"hasCompanyWith,omitempty"`

	// "permissions" edge predicates.
	HasPermissions     *bool                       `json:"hasPermissions,omitempty"`
	HasPermissionsWith []*RolePermissionWhereInput `json:"hasPermissionsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RoleWhereInput) AddPredicates(predicates ...predicate.Role) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RoleWhereInput filter on the RoleQuery builder.
func (i *RoleWhereInput) Filter(q *RoleQuery) (*RoleQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRoleWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRoleWhereInput is returned in case the RoleWhereInput is empty.
var ErrEmptyRoleWhereInput = errors.New("ent: empty predicate RoleWhereInput")

// P returns a predicate for filtering roles.
// An error is returned if the input is empty or invalid.
func (i *RoleWhereInput) P() (predicate.Role, error) {
	var predicates []predicate.Role
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, role.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Role, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, role.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Role, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, role.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, role.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, role.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, role.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, role.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, role.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, role.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, role.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, role.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, role.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, role.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, role.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, role.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, role.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, role.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, role.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, role.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, role.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, role.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, role.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, role.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, role.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, role.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, role.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, role.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CompanyID != nil {
		predicates = append(predicates, role.CompanyIDEQ(*i.CompanyID))
	}
	if i.CompanyIDNEQ != nil {
		predicates = append(predicates, role.CompanyIDNEQ(*i.CompanyIDNEQ))
	}
	if len(i.CompanyIDIn) > 0 {
		predicates = append(predicates, role.CompanyIDIn(i.CompanyIDIn...))
	}
	if len(i.CompanyIDNotIn) > 0 {
		predicates = append(predicates, role.CompanyIDNotIn(i.CompanyIDNotIn...))
	}
	if i.CompanyIDIsNil {
		predicates = append(predicates, role.CompanyIDIsNil())
	}
	if i.CompanyIDNotNil {
		predicates = append(predicates, role.CompanyIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, role.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, role.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, role.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, role.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, role.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, role.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, role.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, role.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, role.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, role.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, role.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, role.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, role.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, role.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, role.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, role.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, role.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, role.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, role.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, role.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, role.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, role.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, role.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, role.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, role.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, role.DescriptionContainsFold(*i.DescriptionContainsFold))
	}

	if i.HasCompany != nil {
		p := role.HasCompany()
		if !*i.HasCompany {
			p = role.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCompanyWith) > 0 {
		with := make([]predicate.Company, 0, len(i.HasCompanyWith))
		for _, w := range i.HasCompanyWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCompanyWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, role.HasCompanyWith(with...))
	}
	if i.HasPermissions != nil {
		p := role.HasPermissions()
		if !*i.HasPermissions {
			p = role.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPermissionsWith) > 0 {
		with := make([]predicate.RolePermission, 0, len(i.HasPermissionsWith))
		for _, w := range i.HasPermissionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPermissionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, role.HasPermissionsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRoleWhereInput
	case 1:
		return predicates[0], nil
	default:
		return role.And(predicates...), nil
	}
}

// RolePermissionWhereInput represents a where input for filtering RolePermission queries.
type RolePermissionWhereInput struct {
	Predicates []predicate.RolePermission  `json:"-"`
	Not        *RolePermissionWhereInput   `json:"not,omitempty"`
	Or         []*RolePermissionWhereInput `json:"or,omitempty"`
	And        []*RolePermissionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "company_id" field predicates.
	CompanyID       *uuid.UUID  `json:"companyID,omitempty"`
	CompanyIDNEQ    *uuid.UUID  `json:"companyIDNEQ,omitempty"`
	CompanyIDIn     []uuid.UUID `json:"companyIDIn,omitempty"`
	CompanyIDNotIn  []uuid.UUID `json:"companyIDNotIn,omitempty"`
	CompanyIDIsNil  bool        `json:"companyIDIsNil,omitempty"`
	CompanyIDNotNil bool        `json:"companyIDNotNil,omitempty"`

	// "role_id" field predicates.
	RoleID       *uuid.UUID  `json:"roleID,omitempty"`
	RoleIDNEQ    *uuid.UUID  `json:"roleIDNEQ,omitempty"`
	RoleIDIn     []uuid.UUID `json:"roleIDIn,omitempty"`
	RoleIDNotIn  []uuid.UUID `json:"roleIDNotIn,omitempty"`
	RoleIDIsNil  bool        `json:"roleIDIsNil,omitempty"`
	RoleIDNotNil bool        `json:"roleIDNotNil,omitempty"`

	// "permission_id" field predicates.
	PermissionID       *uuid.UUID  `json:"permissionID,omitempty"`
	PermissionIDNEQ    *uuid.UUID  `json:"permissionIDNEQ,omitempty"`
	PermissionIDIn     []uuid.UUID `json:"permissionIDIn,omitempty"`
	PermissionIDNotIn  []uuid.UUID `json:"permissionIDNotIn,omitempty"`
	PermissionIDIsNil  bool        `json:"permissionIDIsNil,omitempty"`
	PermissionIDNotNil bool        `json:"permissionIDNotNil,omitempty"`

	// "company" edge predicates.
	HasCompany     *bool                `json:"hasCompany,omitempty"`
	HasCompanyWith []*CompanyWhereInput `json:"hasCompanyWith,omitempty"`

	// "role" edge predicates.
	HasRole     *bool             `json:"hasRole,omitempty"`
	HasRoleWith []*RoleWhereInput `json:"hasRoleWith,omitempty"`

	// "permission" edge predicates.
	HasPermission     *bool                   `json:"hasPermission,omitempty"`
	HasPermissionWith []*PermissionWhereInput `json:"hasPermissionWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RolePermissionWhereInput) AddPredicates(predicates ...predicate.RolePermission) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RolePermissionWhereInput filter on the RolePermissionQuery builder.
func (i *RolePermissionWhereInput) Filter(q *RolePermissionQuery) (*RolePermissionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRolePermissionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRolePermissionWhereInput is returned in case the RolePermissionWhereInput is empty.
var ErrEmptyRolePermissionWhereInput = errors.New("ent: empty predicate RolePermissionWhereInput")

// P returns a predicate for filtering rolepermissions.
// An error is returned if the input is empty or invalid.
func (i *RolePermissionWhereInput) P() (predicate.RolePermission, error) {
	var predicates []predicate.RolePermission
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, rolepermission.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.RolePermission, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, rolepermission.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.RolePermission, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, rolepermission.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, rolepermission.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, rolepermission.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, rolepermission.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, rolepermission.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, rolepermission.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, rolepermission.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, rolepermission.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, rolepermission.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, rolepermission.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, rolepermission.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, rolepermission.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, rolepermission.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, rolepermission.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, rolepermission.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, rolepermission.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, rolepermission.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, rolepermission.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, rolepermission.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, rolepermission.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, rolepermission.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, rolepermission.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, rolepermission.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, rolepermission.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, rolepermission.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CompanyID != nil {
		predicates = append(predicates, rolepermission.CompanyIDEQ(*i.CompanyID))
	}
	if i.CompanyIDNEQ != nil {
		predicates = append(predicates, rolepermission.CompanyIDNEQ(*i.CompanyIDNEQ))
	}
	if len(i.CompanyIDIn) > 0 {
		predicates = append(predicates, rolepermission.CompanyIDIn(i.CompanyIDIn...))
	}
	if len(i.CompanyIDNotIn) > 0 {
		predicates = append(predicates, rolepermission.CompanyIDNotIn(i.CompanyIDNotIn...))
	}
	if i.CompanyIDIsNil {
		predicates = append(predicates, rolepermission.CompanyIDIsNil())
	}
	if i.CompanyIDNotNil {
		predicates = append(predicates, rolepermission.CompanyIDNotNil())
	}
	if i.RoleID != nil {
		predicates = append(predicates, rolepermission.RoleIDEQ(*i.RoleID))
	}
	if i.RoleIDNEQ != nil {
		predicates = append(predicates, rolepermission.RoleIDNEQ(*i.RoleIDNEQ))
	}
	if len(i.RoleIDIn) > 0 {
		predicates = append(predicates, rolepermission.RoleIDIn(i.RoleIDIn...))
	}
	if len(i.RoleIDNotIn) > 0 {
		predicates = append(predicates, rolepermission.RoleIDNotIn(i.RoleIDNotIn...))
	}
	if i.RoleIDIsNil {
		predicates = append(predicates, rolepermission.RoleIDIsNil())
	}
	if i.RoleIDNotNil {
		predicates = append(predicates, rolepermission.RoleIDNotNil())
	}
	if i.PermissionID != nil {
		predicates = append(predicates, rolepermission.PermissionIDEQ(*i.PermissionID))
	}
	if i.PermissionIDNEQ != nil {
		predicates = append(predicates, rolepermission.PermissionIDNEQ(*i.PermissionIDNEQ))
	}
	if len(i.PermissionIDIn) > 0 {
		predicates = append(predicates, rolepermission.PermissionIDIn(i.PermissionIDIn...))
	}
	if len(i.PermissionIDNotIn) > 0 {
		predicates = append(predicates, rolepermission.PermissionIDNotIn(i.PermissionIDNotIn...))
	}
	if i.PermissionIDIsNil {
		predicates = append(predicates, rolepermission.PermissionIDIsNil())
	}
	if i.PermissionIDNotNil {
		predicates = append(predicates, rolepermission.PermissionIDNotNil())
	}

	if i.HasCompany != nil {
		p := rolepermission.HasCompany()
		if !*i.HasCompany {
			p = rolepermission.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCompanyWith) > 0 {
		with := make([]predicate.Company, 0, len(i.HasCompanyWith))
		for _, w := range i.HasCompanyWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCompanyWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, rolepermission.HasCompanyWith(with...))
	}
	if i.HasRole != nil {
		p := rolepermission.HasRole()
		if !*i.HasRole {
			p = rolepermission.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoleWith) > 0 {
		with := make([]predicate.Role, 0, len(i.HasRoleWith))
		for _, w := range i.HasRoleWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoleWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, rolepermission.HasRoleWith(with...))
	}
	if i.HasPermission != nil {
		p := rolepermission.HasPermission()
		if !*i.HasPermission {
			p = rolepermission.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPermissionWith) > 0 {
		with := make([]predicate.Permission, 0, len(i.HasPermissionWith))
		for _, w := range i.HasPermissionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPermissionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, rolepermission.HasPermissionWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRolePermissionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return rolepermission.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "company_id" field predicates.
	CompanyID       *uuid.UUID  `json:"companyID,omitempty"`
	CompanyIDNEQ    *uuid.UUID  `json:"companyIDNEQ,omitempty"`
	CompanyIDIn     []uuid.UUID `json:"companyIDIn,omitempty"`
	CompanyIDNotIn  []uuid.UUID `json:"companyIDNotIn,omitempty"`
	CompanyIDIsNil  bool        `json:"companyIDIsNil,omitempty"`
	CompanyIDNotNil bool        `json:"companyIDNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "mobile" field predicates.
	Mobile             *string  `json:"mobile,omitempty"`
	MobileNEQ          *string  `json:"mobileNEQ,omitempty"`
	MobileIn           []string `json:"mobileIn,omitempty"`
	MobileNotIn        []string `json:"mobileNotIn,omitempty"`
	MobileGT           *string  `json:"mobileGT,omitempty"`
	MobileGTE          *string  `json:"mobileGTE,omitempty"`
	MobileLT           *string  `json:"mobileLT,omitempty"`
	MobileLTE          *string  `json:"mobileLTE,omitempty"`
	MobileContains     *string  `json:"mobileContains,omitempty"`
	MobileHasPrefix    *string  `json:"mobileHasPrefix,omitempty"`
	MobileHasSuffix    *string  `json:"mobileHasSuffix,omitempty"`
	MobileEqualFold    *string  `json:"mobileEqualFold,omitempty"`
	MobileContainsFold *string  `json:"mobileContainsFold,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "is_disabled" field predicates.
	IsDisabled    *bool `json:"isDisabled,omitempty"`
	IsDisabledNEQ *bool `json:"isDisabledNEQ,omitempty"`

	// "date_of_birth" field predicates.
	DateOfBirth       *entFields.DateOnly   `json:"dateOfBirth,omitempty"`
	DateOfBirthNEQ    *entFields.DateOnly   `json:"dateOfBirthNEQ,omitempty"`
	DateOfBirthIn     []*entFields.DateOnly `json:"dateOfBirthIn,omitempty"`
	DateOfBirthNotIn  []*entFields.DateOnly `json:"dateOfBirthNotIn,omitempty"`
	DateOfBirthGT     *entFields.DateOnly   `json:"dateOfBirthGT,omitempty"`
	DateOfBirthGTE    *entFields.DateOnly   `json:"dateOfBirthGTE,omitempty"`
	DateOfBirthLT     *entFields.DateOnly   `json:"dateOfBirthLT,omitempty"`
	DateOfBirthLTE    *entFields.DateOnly   `json:"dateOfBirthLTE,omitempty"`
	DateOfBirthIsNil  bool                  `json:"dateOfBirthIsNil,omitempty"`
	DateOfBirthNotNil bool                  `json:"dateOfBirthNotNil,omitempty"`

	// "date_of_join" field predicates.
	DateOfJoin      *entFields.DateOnly   `json:"dateOfJoin,omitempty"`
	DateOfJoinNEQ   *entFields.DateOnly   `json:"dateOfJoinNEQ,omitempty"`
	DateOfJoinIn    []*entFields.DateOnly `json:"dateOfJoinIn,omitempty"`
	DateOfJoinNotIn []*entFields.DateOnly `json:"dateOfJoinNotIn,omitempty"`
	DateOfJoinGT    *entFields.DateOnly   `json:"dateOfJoinGT,omitempty"`
	DateOfJoinGTE   *entFields.DateOnly   `json:"dateOfJoinGTE,omitempty"`
	DateOfJoinLT    *entFields.DateOnly   `json:"dateOfJoinLT,omitempty"`
	DateOfJoinLTE   *entFields.DateOnly   `json:"dateOfJoinLTE,omitempty"`

	// "timing_start" field predicates.
	TimingStart       *entFields.TimeOnly   `json:"timingStart,omitempty"`
	TimingStartNEQ    *entFields.TimeOnly   `json:"timingStartNEQ,omitempty"`
	TimingStartIn     []*entFields.TimeOnly `json:"timingStartIn,omitempty"`
	TimingStartNotIn  []*entFields.TimeOnly `json:"timingStartNotIn,omitempty"`
	TimingStartGT     *entFields.TimeOnly   `json:"timingStartGT,omitempty"`
	TimingStartGTE    *entFields.TimeOnly   `json:"timingStartGTE,omitempty"`
	TimingStartLT     *entFields.TimeOnly   `json:"timingStartLT,omitempty"`
	TimingStartLTE    *entFields.TimeOnly   `json:"timingStartLTE,omitempty"`
	TimingStartIsNil  bool                  `json:"timingStartIsNil,omitempty"`
	TimingStartNotNil bool                  `json:"timingStartNotNil,omitempty"`

	// "employee_id" field predicates.
	EmployeeID             *string  `json:"employeeID,omitempty"`
	EmployeeIDNEQ          *string  `json:"employeeIDNEQ,omitempty"`
	EmployeeIDIn           []string `json:"employeeIDIn,omitempty"`
	EmployeeIDNotIn        []string `json:"employeeIDNotIn,omitempty"`
	EmployeeIDGT           *string  `json:"employeeIDGT,omitempty"`
	EmployeeIDGTE          *string  `json:"employeeIDGTE,omitempty"`
	EmployeeIDLT           *string  `json:"employeeIDLT,omitempty"`
	EmployeeIDLTE          *string  `json:"employeeIDLTE,omitempty"`
	EmployeeIDContains     *string  `json:"employeeIDContains,omitempty"`
	EmployeeIDHasPrefix    *string  `json:"employeeIDHasPrefix,omitempty"`
	EmployeeIDHasSuffix    *string  `json:"employeeIDHasSuffix,omitempty"`
	EmployeeIDIsNil        bool     `json:"employeeIDIsNil,omitempty"`
	EmployeeIDNotNil       bool     `json:"employeeIDNotNil,omitempty"`
	EmployeeIDEqualFold    *string  `json:"employeeIDEqualFold,omitempty"`
	EmployeeIDContainsFold *string  `json:"employeeIDContainsFold,omitempty"`

	// "role_id" field predicates.
	RoleID       *uuid.UUID  `json:"roleID,omitempty"`
	RoleIDNEQ    *uuid.UUID  `json:"roleIDNEQ,omitempty"`
	RoleIDIn     []uuid.UUID `json:"roleIDIn,omitempty"`
	RoleIDNotIn  []uuid.UUID `json:"roleIDNotIn,omitempty"`
	RoleIDGT     *uuid.UUID  `json:"roleIDGT,omitempty"`
	RoleIDGTE    *uuid.UUID  `json:"roleIDGTE,omitempty"`
	RoleIDLT     *uuid.UUID  `json:"roleIDLT,omitempty"`
	RoleIDLTE    *uuid.UUID  `json:"roleIDLTE,omitempty"`
	RoleIDIsNil  bool        `json:"roleIDIsNil,omitempty"`
	RoleIDNotNil bool        `json:"roleIDNotNil,omitempty"`

	// "company" edge predicates.
	HasCompany     *bool                `json:"hasCompany,omitempty"`
	HasCompanyWith []*CompanyWhereInput `json:"hasCompanyWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CompanyID != nil {
		predicates = append(predicates, user.CompanyIDEQ(*i.CompanyID))
	}
	if i.CompanyIDNEQ != nil {
		predicates = append(predicates, user.CompanyIDNEQ(*i.CompanyIDNEQ))
	}
	if len(i.CompanyIDIn) > 0 {
		predicates = append(predicates, user.CompanyIDIn(i.CompanyIDIn...))
	}
	if len(i.CompanyIDNotIn) > 0 {
		predicates = append(predicates, user.CompanyIDNotIn(i.CompanyIDNotIn...))
	}
	if i.CompanyIDIsNil {
		predicates = append(predicates, user.CompanyIDIsNil())
	}
	if i.CompanyIDNotNil {
		predicates = append(predicates, user.CompanyIDNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, user.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, user.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Mobile != nil {
		predicates = append(predicates, user.MobileEQ(*i.Mobile))
	}
	if i.MobileNEQ != nil {
		predicates = append(predicates, user.MobileNEQ(*i.MobileNEQ))
	}
	if len(i.MobileIn) > 0 {
		predicates = append(predicates, user.MobileIn(i.MobileIn...))
	}
	if len(i.MobileNotIn) > 0 {
		predicates = append(predicates, user.MobileNotIn(i.MobileNotIn...))
	}
	if i.MobileGT != nil {
		predicates = append(predicates, user.MobileGT(*i.MobileGT))
	}
	if i.MobileGTE != nil {
		predicates = append(predicates, user.MobileGTE(*i.MobileGTE))
	}
	if i.MobileLT != nil {
		predicates = append(predicates, user.MobileLT(*i.MobileLT))
	}
	if i.MobileLTE != nil {
		predicates = append(predicates, user.MobileLTE(*i.MobileLTE))
	}
	if i.MobileContains != nil {
		predicates = append(predicates, user.MobileContains(*i.MobileContains))
	}
	if i.MobileHasPrefix != nil {
		predicates = append(predicates, user.MobileHasPrefix(*i.MobileHasPrefix))
	}
	if i.MobileHasSuffix != nil {
		predicates = append(predicates, user.MobileHasSuffix(*i.MobileHasSuffix))
	}
	if i.MobileEqualFold != nil {
		predicates = append(predicates, user.MobileEqualFold(*i.MobileEqualFold))
	}
	if i.MobileContainsFold != nil {
		predicates = append(predicates, user.MobileContainsFold(*i.MobileContainsFold))
	}
	if i.Password != nil {
		predicates = append(predicates, user.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, user.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, user.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, user.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, user.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, user.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, user.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, user.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, user.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, user.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, user.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, user.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, user.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.IsDisabled != nil {
		predicates = append(predicates, user.IsDisabledEQ(*i.IsDisabled))
	}
	if i.IsDisabledNEQ != nil {
		predicates = append(predicates, user.IsDisabledNEQ(*i.IsDisabledNEQ))
	}
	if i.DateOfBirth != nil {
		predicates = append(predicates, user.DateOfBirthEQ(i.DateOfBirth))
	}
	if i.DateOfBirthNEQ != nil {
		predicates = append(predicates, user.DateOfBirthNEQ(i.DateOfBirthNEQ))
	}
	if len(i.DateOfBirthIn) > 0 {
		predicates = append(predicates, user.DateOfBirthIn(i.DateOfBirthIn...))
	}
	if len(i.DateOfBirthNotIn) > 0 {
		predicates = append(predicates, user.DateOfBirthNotIn(i.DateOfBirthNotIn...))
	}
	if i.DateOfBirthGT != nil {
		predicates = append(predicates, user.DateOfBirthGT(i.DateOfBirthGT))
	}
	if i.DateOfBirthGTE != nil {
		predicates = append(predicates, user.DateOfBirthGTE(i.DateOfBirthGTE))
	}
	if i.DateOfBirthLT != nil {
		predicates = append(predicates, user.DateOfBirthLT(i.DateOfBirthLT))
	}
	if i.DateOfBirthLTE != nil {
		predicates = append(predicates, user.DateOfBirthLTE(i.DateOfBirthLTE))
	}
	if i.DateOfBirthIsNil {
		predicates = append(predicates, user.DateOfBirthIsNil())
	}
	if i.DateOfBirthNotNil {
		predicates = append(predicates, user.DateOfBirthNotNil())
	}
	if i.DateOfJoin != nil {
		predicates = append(predicates, user.DateOfJoinEQ(i.DateOfJoin))
	}
	if i.DateOfJoinNEQ != nil {
		predicates = append(predicates, user.DateOfJoinNEQ(i.DateOfJoinNEQ))
	}
	if len(i.DateOfJoinIn) > 0 {
		predicates = append(predicates, user.DateOfJoinIn(i.DateOfJoinIn...))
	}
	if len(i.DateOfJoinNotIn) > 0 {
		predicates = append(predicates, user.DateOfJoinNotIn(i.DateOfJoinNotIn...))
	}
	if i.DateOfJoinGT != nil {
		predicates = append(predicates, user.DateOfJoinGT(i.DateOfJoinGT))
	}
	if i.DateOfJoinGTE != nil {
		predicates = append(predicates, user.DateOfJoinGTE(i.DateOfJoinGTE))
	}
	if i.DateOfJoinLT != nil {
		predicates = append(predicates, user.DateOfJoinLT(i.DateOfJoinLT))
	}
	if i.DateOfJoinLTE != nil {
		predicates = append(predicates, user.DateOfJoinLTE(i.DateOfJoinLTE))
	}
	if i.TimingStart != nil {
		predicates = append(predicates, user.TimingStartEQ(i.TimingStart))
	}
	if i.TimingStartNEQ != nil {
		predicates = append(predicates, user.TimingStartNEQ(i.TimingStartNEQ))
	}
	if len(i.TimingStartIn) > 0 {
		predicates = append(predicates, user.TimingStartIn(i.TimingStartIn...))
	}
	if len(i.TimingStartNotIn) > 0 {
		predicates = append(predicates, user.TimingStartNotIn(i.TimingStartNotIn...))
	}
	if i.TimingStartGT != nil {
		predicates = append(predicates, user.TimingStartGT(i.TimingStartGT))
	}
	if i.TimingStartGTE != nil {
		predicates = append(predicates, user.TimingStartGTE(i.TimingStartGTE))
	}
	if i.TimingStartLT != nil {
		predicates = append(predicates, user.TimingStartLT(i.TimingStartLT))
	}
	if i.TimingStartLTE != nil {
		predicates = append(predicates, user.TimingStartLTE(i.TimingStartLTE))
	}
	if i.TimingStartIsNil {
		predicates = append(predicates, user.TimingStartIsNil())
	}
	if i.TimingStartNotNil {
		predicates = append(predicates, user.TimingStartNotNil())
	}
	if i.EmployeeID != nil {
		predicates = append(predicates, user.EmployeeIDEQ(*i.EmployeeID))
	}
	if i.EmployeeIDNEQ != nil {
		predicates = append(predicates, user.EmployeeIDNEQ(*i.EmployeeIDNEQ))
	}
	if len(i.EmployeeIDIn) > 0 {
		predicates = append(predicates, user.EmployeeIDIn(i.EmployeeIDIn...))
	}
	if len(i.EmployeeIDNotIn) > 0 {
		predicates = append(predicates, user.EmployeeIDNotIn(i.EmployeeIDNotIn...))
	}
	if i.EmployeeIDGT != nil {
		predicates = append(predicates, user.EmployeeIDGT(*i.EmployeeIDGT))
	}
	if i.EmployeeIDGTE != nil {
		predicates = append(predicates, user.EmployeeIDGTE(*i.EmployeeIDGTE))
	}
	if i.EmployeeIDLT != nil {
		predicates = append(predicates, user.EmployeeIDLT(*i.EmployeeIDLT))
	}
	if i.EmployeeIDLTE != nil {
		predicates = append(predicates, user.EmployeeIDLTE(*i.EmployeeIDLTE))
	}
	if i.EmployeeIDContains != nil {
		predicates = append(predicates, user.EmployeeIDContains(*i.EmployeeIDContains))
	}
	if i.EmployeeIDHasPrefix != nil {
		predicates = append(predicates, user.EmployeeIDHasPrefix(*i.EmployeeIDHasPrefix))
	}
	if i.EmployeeIDHasSuffix != nil {
		predicates = append(predicates, user.EmployeeIDHasSuffix(*i.EmployeeIDHasSuffix))
	}
	if i.EmployeeIDIsNil {
		predicates = append(predicates, user.EmployeeIDIsNil())
	}
	if i.EmployeeIDNotNil {
		predicates = append(predicates, user.EmployeeIDNotNil())
	}
	if i.EmployeeIDEqualFold != nil {
		predicates = append(predicates, user.EmployeeIDEqualFold(*i.EmployeeIDEqualFold))
	}
	if i.EmployeeIDContainsFold != nil {
		predicates = append(predicates, user.EmployeeIDContainsFold(*i.EmployeeIDContainsFold))
	}
	if i.RoleID != nil {
		predicates = append(predicates, user.RoleIDEQ(*i.RoleID))
	}
	if i.RoleIDNEQ != nil {
		predicates = append(predicates, user.RoleIDNEQ(*i.RoleIDNEQ))
	}
	if len(i.RoleIDIn) > 0 {
		predicates = append(predicates, user.RoleIDIn(i.RoleIDIn...))
	}
	if len(i.RoleIDNotIn) > 0 {
		predicates = append(predicates, user.RoleIDNotIn(i.RoleIDNotIn...))
	}
	if i.RoleIDGT != nil {
		predicates = append(predicates, user.RoleIDGT(*i.RoleIDGT))
	}
	if i.RoleIDGTE != nil {
		predicates = append(predicates, user.RoleIDGTE(*i.RoleIDGTE))
	}
	if i.RoleIDLT != nil {
		predicates = append(predicates, user.RoleIDLT(*i.RoleIDLT))
	}
	if i.RoleIDLTE != nil {
		predicates = append(predicates, user.RoleIDLTE(*i.RoleIDLTE))
	}
	if i.RoleIDIsNil {
		predicates = append(predicates, user.RoleIDIsNil())
	}
	if i.RoleIDNotNil {
		predicates = append(predicates, user.RoleIDNotNil())
	}

	if i.HasCompany != nil {
		p := user.HasCompany()
		if !*i.HasCompany {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasCompanyWith) > 0 {
		with := make([]predicate.Company, 0, len(i.HasCompanyWith))
		for _, w := range i.HasCompanyWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasCompanyWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasCompanyWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
