// Code generated by ent, DO NOT EDIT.

package permission

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the permission type in the database.
	Label = "permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCompanyID holds the string denoting the company_id field in the database.
	FieldCompanyID = "company_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRead holds the string denoting the read field in the database.
	FieldRead = "read"
	// FieldWrite holds the string denoting the write field in the database.
	FieldWrite = "write"
	// FieldPatch holds the string denoting the patch field in the database.
	FieldPatch = "patch"
	// FieldDelete holds the string denoting the delete field in the database.
	FieldDelete = "delete"
	// Table holds the table name of the permission in the database.
	Table = "permissions"
)

// Columns holds all SQL columns for permission fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCompanyID,
	FieldName,
	FieldDescription,
	FieldRead,
	FieldWrite,
	FieldPatch,
	FieldDelete,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultRead holds the default value on creation for the "read" field.
	DefaultRead bool
	// DefaultWrite holds the default value on creation for the "write" field.
	DefaultWrite bool
	// DefaultPatch holds the default value on creation for the "patch" field.
	DefaultPatch bool
	// DefaultDelete holds the default value on creation for the "delete" field.
	DefaultDelete bool
)

// OrderOption defines the ordering options for the Permission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCompanyID orders the results by the company_id field.
func ByCompanyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRead orders the results by the read field.
func ByRead(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRead, opts...).ToFunc()
}

// ByWrite orders the results by the write field.
func ByWrite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWrite, opts...).ToFunc()
}

// ByPatch orders the results by the patch field.
func ByPatch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPatch, opts...).ToFunc()
}

// ByDelete orders the results by the delete field.
func ByDelete(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDelete, opts...).ToFunc()
}
