// Code generated by ent, DO NOT EDIT.

package ent

import (
	"project/utils/entFields"
	"time"

	"github.com/google/uuid"
)

// CreateCompanyInput represents a mutation input for creating companies.
type CreateCompanyInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	CompanyID  *uuid.UUID
	Name       string
	IsDisabled *bool
	OwnerID    *uuid.UUID
	UserIDs    []uuid.UUID
	RoleIDs    []uuid.UUID
}

// Mutate applies the CreateCompanyInput on the CompanyMutation builder.
func (i *CreateCompanyInput) Mutate(m *CompanyMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	m.SetName(i.Name)
	if v := i.IsDisabled; v != nil {
		m.SetIsDisabled(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCompanyInput on the CompanyCreate builder.
func (c *CompanyCreate) SetInput(i CreateCompanyInput) *CompanyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCompanyInput represents a mutation input for updating companies.
type UpdateCompanyInput struct {
	UpdatedAt      *time.Time
	ClearCompanyID bool
	CompanyID      *uuid.UUID
	Name           *string
	IsDisabled     *bool
	ClearOwnerID   bool
	OwnerID        *uuid.UUID
	ClearUsers     bool
	AddUserIDs     []uuid.UUID
	RemoveUserIDs  []uuid.UUID
	ClearRoles     bool
	AddRoleIDs     []uuid.UUID
	RemoveRoleIDs  []uuid.UUID
}

// Mutate applies the UpdateCompanyInput on the CompanyMutation builder.
func (i *UpdateCompanyInput) Mutate(m *CompanyMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearCompanyID {
		m.ClearCompanyID()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.IsDisabled; v != nil {
		m.SetIsDisabled(*v)
	}
	if i.ClearOwnerID {
		m.ClearOwnerID()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearRoles {
		m.ClearRoles()
	}
	if v := i.AddRoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
	if v := i.RemoveRoleIDs; len(v) > 0 {
		m.RemoveRoleIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdate builder.
func (c *CompanyUpdate) SetInput(i UpdateCompanyInput) *CompanyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdateOne builder.
func (c *CompanyUpdateOne) SetInput(i UpdateCompanyInput) *CompanyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePermissionInput represents a mutation input for creating permissions.
type CreatePermissionInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	CompanyID   *uuid.UUID
	Name        string
	Description string
	Read        *bool
	Write       *bool
	Patch       *bool
	Delete      *bool
}

// Mutate applies the CreatePermissionInput on the PermissionMutation builder.
func (i *CreatePermissionInput) Mutate(m *PermissionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.Read; v != nil {
		m.SetRead(*v)
	}
	if v := i.Write; v != nil {
		m.SetWrite(*v)
	}
	if v := i.Patch; v != nil {
		m.SetPatch(*v)
	}
	if v := i.Delete; v != nil {
		m.SetDelete(*v)
	}
}

// SetInput applies the change-set in the CreatePermissionInput on the PermissionCreate builder.
func (c *PermissionCreate) SetInput(i CreatePermissionInput) *PermissionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePermissionInput represents a mutation input for updating permissions.
type UpdatePermissionInput struct {
	UpdatedAt      *time.Time
	ClearCompanyID bool
	CompanyID      *uuid.UUID
	Name           *string
	Description    *string
	Read           *bool
	Write          *bool
	Patch          *bool
	Delete         *bool
}

// Mutate applies the UpdatePermissionInput on the PermissionMutation builder.
func (i *UpdatePermissionInput) Mutate(m *PermissionMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearCompanyID {
		m.ClearCompanyID()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Read; v != nil {
		m.SetRead(*v)
	}
	if v := i.Write; v != nil {
		m.SetWrite(*v)
	}
	if v := i.Patch; v != nil {
		m.SetPatch(*v)
	}
	if v := i.Delete; v != nil {
		m.SetDelete(*v)
	}
}

// SetInput applies the change-set in the UpdatePermissionInput on the PermissionUpdate builder.
func (c *PermissionUpdate) SetInput(i UpdatePermissionInput) *PermissionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePermissionInput on the PermissionUpdateOne builder.
func (c *PermissionUpdateOne) SetInput(i UpdatePermissionInput) *PermissionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoleInput represents a mutation input for creating roles.
type CreateRoleInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	Name          string
	Description   string
	CompanyID     *uuid.UUID
	PermissionIDs []uuid.UUID
}

// Mutate applies the CreateRoleInput on the RoleMutation builder.
func (i *CreateRoleInput) Mutate(m *RoleMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.PermissionIDs; len(v) > 0 {
		m.AddPermissionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRoleInput on the RoleCreate builder.
func (c *RoleCreate) SetInput(i CreateRoleInput) *RoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoleInput represents a mutation input for updating roles.
type UpdateRoleInput struct {
	UpdatedAt           *time.Time
	Name                *string
	Description         *string
	ClearCompany        bool
	CompanyID           *uuid.UUID
	ClearPermissions    bool
	AddPermissionIDs    []uuid.UUID
	RemovePermissionIDs []uuid.UUID
}

// Mutate applies the UpdateRoleInput on the RoleMutation builder.
func (i *UpdateRoleInput) Mutate(m *RoleMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearPermissions {
		m.ClearPermissions()
	}
	if v := i.AddPermissionIDs; len(v) > 0 {
		m.AddPermissionIDs(v...)
	}
	if v := i.RemovePermissionIDs; len(v) > 0 {
		m.RemovePermissionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdate builder.
func (c *RoleUpdate) SetInput(i UpdateRoleInput) *RoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdateOne builder.
func (c *RoleUpdateOne) SetInput(i UpdateRoleInput) *RoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRolePermissionInput represents a mutation input for creating rolepermissions.
type CreateRolePermissionInput struct {
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	CompanyID    *uuid.UUID
	RoleID       *uuid.UUID
	PermissionID *uuid.UUID
}

// Mutate applies the CreateRolePermissionInput on the RolePermissionMutation builder.
func (i *CreateRolePermissionInput) Mutate(m *RolePermissionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
	if v := i.PermissionID; v != nil {
		m.SetPermissionID(*v)
	}
}

// SetInput applies the change-set in the CreateRolePermissionInput on the RolePermissionCreate builder.
func (c *RolePermissionCreate) SetInput(i CreateRolePermissionInput) *RolePermissionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRolePermissionInput represents a mutation input for updating rolepermissions.
type UpdateRolePermissionInput struct {
	UpdatedAt       *time.Time
	ClearCompany    bool
	CompanyID       *uuid.UUID
	ClearRole       bool
	RoleID          *uuid.UUID
	ClearPermission bool
	PermissionID    *uuid.UUID
}

// Mutate applies the UpdateRolePermissionInput on the RolePermissionMutation builder.
func (i *UpdateRolePermissionInput) Mutate(m *RolePermissionMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearRole {
		m.ClearRole()
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
	if i.ClearPermission {
		m.ClearPermission()
	}
	if v := i.PermissionID; v != nil {
		m.SetPermissionID(*v)
	}
}

// SetInput applies the change-set in the UpdateRolePermissionInput on the RolePermissionUpdate builder.
func (c *RolePermissionUpdate) SetInput(i UpdateRolePermissionInput) *RolePermissionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRolePermissionInput on the RolePermissionUpdateOne builder.
func (c *RolePermissionUpdateOne) SetInput(i UpdateRolePermissionInput) *RolePermissionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Name        *string
	Email       string
	Mobile      string
	Password    string
	IsDisabled  *bool
	DateOfBirth *entFields.DateOnly
	DateOfJoin  *entFields.DateOnly
	TimingStart *entFields.TimeOnly
	EmployeeID  *string
	RoleID      *uuid.UUID
	CompanyID   *uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	m.SetEmail(i.Email)
	m.SetMobile(i.Mobile)
	m.SetPassword(i.Password)
	if v := i.IsDisabled; v != nil {
		m.SetIsDisabled(*v)
	}
	if v := i.DateOfBirth; v != nil {
		m.SetDateOfBirth(v)
	}
	if v := i.DateOfJoin; v != nil {
		m.SetDateOfJoin(v)
	}
	if v := i.TimingStart; v != nil {
		m.SetTimingStart(v)
	}
	if v := i.EmployeeID; v != nil {
		m.SetEmployeeID(*v)
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt        *time.Time
	ClearName        bool
	Name             *string
	Email            *string
	Mobile           *string
	Password         *string
	IsDisabled       *bool
	ClearDateOfBirth bool
	DateOfBirth      *entFields.DateOnly
	DateOfJoin       *entFields.DateOnly
	ClearTimingStart bool
	TimingStart      *entFields.TimeOnly
	ClearEmployeeID  bool
	EmployeeID       *string
	ClearRoleID      bool
	RoleID           *uuid.UUID
	ClearCompany     bool
	CompanyID        *uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Mobile; v != nil {
		m.SetMobile(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.IsDisabled; v != nil {
		m.SetIsDisabled(*v)
	}
	if i.ClearDateOfBirth {
		m.ClearDateOfBirth()
	}
	if v := i.DateOfBirth; v != nil {
		m.SetDateOfBirth(v)
	}
	if v := i.DateOfJoin; v != nil {
		m.SetDateOfJoin(v)
	}
	if i.ClearTimingStart {
		m.ClearTimingStart()
	}
	if v := i.TimingStart; v != nil {
		m.SetTimingStart(v)
	}
	if i.ClearEmployeeID {
		m.ClearEmployeeID()
	}
	if v := i.EmployeeID; v != nil {
		m.SetEmployeeID(*v)
	}
	if i.ClearRoleID {
		m.ClearRoleID()
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
