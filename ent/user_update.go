// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/ent/company"
	"project/ent/predicate"
	"project/ent/user"
	"project/utils/entFields"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetCompanyID sets the "company_id" field.
func (uu *UserUpdate) SetCompanyID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetCompanyID(u)
	return uu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCompanyID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetCompanyID(*u)
	}
	return uu
}

// ClearCompanyID clears the value of the "company_id" field.
func (uu *UserUpdate) ClearCompanyID() *UserUpdate {
	uu.mutation.ClearCompanyID()
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// ClearName clears the value of the "name" field.
func (uu *UserUpdate) ClearName() *UserUpdate {
	uu.mutation.ClearName()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetMobile sets the "mobile" field.
func (uu *UserUpdate) SetMobile(s string) *UserUpdate {
	uu.mutation.SetMobile(s)
	return uu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMobile(s *string) *UserUpdate {
	if s != nil {
		uu.SetMobile(*s)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetIsDisabled sets the "is_disabled" field.
func (uu *UserUpdate) SetIsDisabled(b bool) *UserUpdate {
	uu.mutation.SetIsDisabled(b)
	return uu
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsDisabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsDisabled(*b)
	}
	return uu
}

// SetDateOfBirth sets the "date_of_birth" field.
func (uu *UserUpdate) SetDateOfBirth(efo *entFields.DateOnly) *UserUpdate {
	uu.mutation.SetDateOfBirth(efo)
	return uu
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (uu *UserUpdate) ClearDateOfBirth() *UserUpdate {
	uu.mutation.ClearDateOfBirth()
	return uu
}

// SetDateOfJoin sets the "date_of_join" field.
func (uu *UserUpdate) SetDateOfJoin(efo *entFields.DateOnly) *UserUpdate {
	uu.mutation.SetDateOfJoin(efo)
	return uu
}

// SetTimingStart sets the "timing_start" field.
func (uu *UserUpdate) SetTimingStart(efo *entFields.TimeOnly) *UserUpdate {
	uu.mutation.SetTimingStart(efo)
	return uu
}

// ClearTimingStart clears the value of the "timing_start" field.
func (uu *UserUpdate) ClearTimingStart() *UserUpdate {
	uu.mutation.ClearTimingStart()
	return uu
}

// SetEmployeeID sets the "employee_id" field.
func (uu *UserUpdate) SetEmployeeID(s string) *UserUpdate {
	uu.mutation.SetEmployeeID(s)
	return uu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmployeeID(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmployeeID(*s)
	}
	return uu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (uu *UserUpdate) ClearEmployeeID() *UserUpdate {
	uu.mutation.ClearEmployeeID()
	return uu
}

// SetRoleID sets the "role_id" field.
func (uu *UserUpdate) SetRoleID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetRoleID(u)
	return uu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRoleID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetRoleID(*u)
	}
	return uu
}

// ClearRoleID clears the value of the "role_id" field.
func (uu *UserUpdate) ClearRoleID() *UserUpdate {
	uu.mutation.ClearRoleID()
	return uu
}

// SetCompany sets the "company" edge to the Company entity.
func (uu *UserUpdate) SetCompany(c *Company) *UserUpdate {
	return uu.SetCompanyID(c.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (uu *UserUpdate) ClearCompany() *UserUpdate {
	uu.mutation.ClearCompany()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uu.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.IsDisabled(); ok {
		_spec.SetField(user.FieldIsDisabled, field.TypeBool, value)
	}
	if value, ok := uu.mutation.DateOfBirth(); ok {
		_spec.SetField(user.FieldDateOfBirth, field.TypeOther, value)
	}
	if uu.mutation.DateOfBirthCleared() {
		_spec.ClearField(user.FieldDateOfBirth, field.TypeOther)
	}
	if value, ok := uu.mutation.DateOfJoin(); ok {
		_spec.SetField(user.FieldDateOfJoin, field.TypeOther, value)
	}
	if value, ok := uu.mutation.TimingStart(); ok {
		_spec.SetField(user.FieldTimingStart, field.TypeOther, value)
	}
	if uu.mutation.TimingStartCleared() {
		_spec.ClearField(user.FieldTimingStart, field.TypeOther)
	}
	if value, ok := uu.mutation.EmployeeID(); ok {
		_spec.SetField(user.FieldEmployeeID, field.TypeString, value)
	}
	if uu.mutation.EmployeeIDCleared() {
		_spec.ClearField(user.FieldEmployeeID, field.TypeString)
	}
	if value, ok := uu.mutation.RoleID(); ok {
		_spec.SetField(user.FieldRoleID, field.TypeUUID, value)
	}
	if uu.mutation.RoleIDCleared() {
		_spec.ClearField(user.FieldRoleID, field.TypeUUID)
	}
	if uu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CompanyTable,
			Columns: []string{user.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CompanyTable,
			Columns: []string{user.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetCompanyID sets the "company_id" field.
func (uuo *UserUpdateOne) SetCompanyID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetCompanyID(u)
	return uuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCompanyID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetCompanyID(*u)
	}
	return uuo
}

// ClearCompanyID clears the value of the "company_id" field.
func (uuo *UserUpdateOne) ClearCompanyID() *UserUpdateOne {
	uuo.mutation.ClearCompanyID()
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// ClearName clears the value of the "name" field.
func (uuo *UserUpdateOne) ClearName() *UserUpdateOne {
	uuo.mutation.ClearName()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetMobile sets the "mobile" field.
func (uuo *UserUpdateOne) SetMobile(s string) *UserUpdateOne {
	uuo.mutation.SetMobile(s)
	return uuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMobile(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetMobile(*s)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetIsDisabled sets the "is_disabled" field.
func (uuo *UserUpdateOne) SetIsDisabled(b bool) *UserUpdateOne {
	uuo.mutation.SetIsDisabled(b)
	return uuo
}

// SetNillableIsDisabled sets the "is_disabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsDisabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsDisabled(*b)
	}
	return uuo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (uuo *UserUpdateOne) SetDateOfBirth(efo *entFields.DateOnly) *UserUpdateOne {
	uuo.mutation.SetDateOfBirth(efo)
	return uuo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (uuo *UserUpdateOne) ClearDateOfBirth() *UserUpdateOne {
	uuo.mutation.ClearDateOfBirth()
	return uuo
}

// SetDateOfJoin sets the "date_of_join" field.
func (uuo *UserUpdateOne) SetDateOfJoin(efo *entFields.DateOnly) *UserUpdateOne {
	uuo.mutation.SetDateOfJoin(efo)
	return uuo
}

// SetTimingStart sets the "timing_start" field.
func (uuo *UserUpdateOne) SetTimingStart(efo *entFields.TimeOnly) *UserUpdateOne {
	uuo.mutation.SetTimingStart(efo)
	return uuo
}

// ClearTimingStart clears the value of the "timing_start" field.
func (uuo *UserUpdateOne) ClearTimingStart() *UserUpdateOne {
	uuo.mutation.ClearTimingStart()
	return uuo
}

// SetEmployeeID sets the "employee_id" field.
func (uuo *UserUpdateOne) SetEmployeeID(s string) *UserUpdateOne {
	uuo.mutation.SetEmployeeID(s)
	return uuo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmployeeID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmployeeID(*s)
	}
	return uuo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (uuo *UserUpdateOne) ClearEmployeeID() *UserUpdateOne {
	uuo.mutation.ClearEmployeeID()
	return uuo
}

// SetRoleID sets the "role_id" field.
func (uuo *UserUpdateOne) SetRoleID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetRoleID(u)
	return uuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoleID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetRoleID(*u)
	}
	return uuo
}

// ClearRoleID clears the value of the "role_id" field.
func (uuo *UserUpdateOne) ClearRoleID() *UserUpdateOne {
	uuo.mutation.ClearRoleID()
	return uuo
}

// SetCompany sets the "company" edge to the Company entity.
func (uuo *UserUpdateOne) SetCompany(c *Company) *UserUpdateOne {
	return uuo.SetCompanyID(c.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (uuo *UserUpdateOne) ClearCompany() *UserUpdateOne {
	uuo.mutation.ClearCompany()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if uuo.mutation.NameCleared() {
		_spec.ClearField(user.FieldName, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Mobile(); ok {
		_spec.SetField(user.FieldMobile, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.IsDisabled(); ok {
		_spec.SetField(user.FieldIsDisabled, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.DateOfBirth(); ok {
		_spec.SetField(user.FieldDateOfBirth, field.TypeOther, value)
	}
	if uuo.mutation.DateOfBirthCleared() {
		_spec.ClearField(user.FieldDateOfBirth, field.TypeOther)
	}
	if value, ok := uuo.mutation.DateOfJoin(); ok {
		_spec.SetField(user.FieldDateOfJoin, field.TypeOther, value)
	}
	if value, ok := uuo.mutation.TimingStart(); ok {
		_spec.SetField(user.FieldTimingStart, field.TypeOther, value)
	}
	if uuo.mutation.TimingStartCleared() {
		_spec.ClearField(user.FieldTimingStart, field.TypeOther)
	}
	if value, ok := uuo.mutation.EmployeeID(); ok {
		_spec.SetField(user.FieldEmployeeID, field.TypeString, value)
	}
	if uuo.mutation.EmployeeIDCleared() {
		_spec.ClearField(user.FieldEmployeeID, field.TypeString)
	}
	if value, ok := uuo.mutation.RoleID(); ok {
		_spec.SetField(user.FieldRoleID, field.TypeUUID, value)
	}
	if uuo.mutation.RoleIDCleared() {
		_spec.ClearField(user.FieldRoleID, field.TypeUUID)
	}
	if uuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CompanyTable,
			Columns: []string{user.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CompanyTable,
			Columns: []string{user.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
