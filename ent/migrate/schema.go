// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CompaniesColumns holds the columns for the "companies" table.
	CompaniesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true, Default: schema.Expr("uuid_generate_v4()")},
		{Name: "created_at", Type: field.TypeTime, Default: "now()"},
		{Name: "updated_at", Type: field.TypeTime, Default: "now()"},
		{Name: "company_id", Type: field.TypeUUID, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "is_disabled", Type: field.TypeBool, Default: false},
		{Name: "owner_id", Type: field.TypeUUID, Nullable: true},
	}
	// CompaniesTable holds the schema information for the "companies" table.
	CompaniesTable = &schema.Table{
		Name:       "companies",
		Columns:    CompaniesColumns,
		PrimaryKey: []*schema.Column{CompaniesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "company_created_at",
				Unique:  false,
				Columns: []*schema.Column{CompaniesColumns[1]},
			},
			{
				Name:    "company_company_id",
				Unique:  false,
				Columns: []*schema.Column{CompaniesColumns[3]},
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true, Default: schema.Expr("uuid_generate_v4()")},
		{Name: "created_at", Type: field.TypeTime, Default: "now()"},
		{Name: "updated_at", Type: field.TypeTime, Default: "now()"},
		{Name: "company_id", Type: field.TypeUUID, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "read", Type: field.TypeBool, Default: false},
		{Name: "write", Type: field.TypeBool, Default: false},
		{Name: "patch", Type: field.TypeBool, Default: false},
		{Name: "delete", Type: field.TypeBool, Default: false},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "permission_created_at",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[1]},
			},
			{
				Name:    "permission_company_id",
				Unique:  false,
				Columns: []*schema.Column{PermissionsColumns[3]},
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true, Default: schema.Expr("uuid_generate_v4()")},
		{Name: "created_at", Type: field.TypeTime, Default: "now()"},
		{Name: "updated_at", Type: field.TypeTime, Default: "now()"},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "company_id", Type: field.TypeUUID, Nullable: true},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "roles_companies_company",
				Columns:    []*schema.Column{RolesColumns[5]},
				RefColumns: []*schema.Column{CompaniesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "role_created_at",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[1]},
			},
			{
				Name:    "role_company_id",
				Unique:  false,
				Columns: []*schema.Column{RolesColumns[5]},
			},
		},
	}
	// RolePermissionsColumns holds the columns for the "role_permissions" table.
	RolePermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true, Default: schema.Expr("uuid_generate_v4()")},
		{Name: "created_at", Type: field.TypeTime, Default: "now()"},
		{Name: "updated_at", Type: field.TypeTime, Default: "now()"},
		{Name: "company_id", Type: field.TypeUUID, Nullable: true},
		{Name: "role_id", Type: field.TypeUUID, Nullable: true},
		{Name: "permission_id", Type: field.TypeUUID, Nullable: true},
	}
	// RolePermissionsTable holds the schema information for the "role_permissions" table.
	RolePermissionsTable = &schema.Table{
		Name:       "role_permissions",
		Columns:    RolePermissionsColumns,
		PrimaryKey: []*schema.Column{RolePermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_permissions_companies_company",
				Columns:    []*schema.Column{RolePermissionsColumns[3]},
				RefColumns: []*schema.Column{CompaniesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "role_permissions_roles_role",
				Columns:    []*schema.Column{RolePermissionsColumns[4]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "role_permissions_permissions_permission",
				Columns:    []*schema.Column{RolePermissionsColumns[5]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "rolepermission_created_at",
				Unique:  false,
				Columns: []*schema.Column{RolePermissionsColumns[1]},
			},
			{
				Name:    "rolepermission_company_id",
				Unique:  false,
				Columns: []*schema.Column{RolePermissionsColumns[3]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true, Default: schema.Expr("uuid_generate_v4()")},
		{Name: "created_at", Type: field.TypeTime, Default: "now()"},
		{Name: "updated_at", Type: field.TypeTime, Default: "now()"},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString},
		{Name: "mobile", Type: field.TypeString},
		{Name: "password", Type: field.TypeString},
		{Name: "is_disabled", Type: field.TypeBool, Default: false},
		{Name: "date_of_birth", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"mysql": "date", "postgres": "date"}},
		{Name: "date_of_join", Type: field.TypeOther, SchemaType: map[string]string{"mysql": "date", "postgres": "date"}},
		{Name: "timing_start", Type: field.TypeOther, Nullable: true, SchemaType: map[string]string{"mysql": "time", "postgres": "time"}},
		{Name: "employee_id", Type: field.TypeString, Nullable: true},
		{Name: "role_id", Type: field.TypeUUID, Nullable: true},
		{Name: "company_id", Type: field.TypeUUID, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_companies_company",
				Columns:    []*schema.Column{UsersColumns[13]},
				RefColumns: []*schema.Column{CompaniesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_created_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[1]},
			},
			{
				Name:    "user_company_id",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[13]},
			},
			{
				Name:    "user_company_id_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[13], UsersColumns[4]},
			},
			{
				Name:    "user_company_id_mobile",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[13], UsersColumns[5]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CompaniesTable,
		PermissionsTable,
		RolesTable,
		RolePermissionsTable,
		UsersTable,
	}
)

func init() {
	RolesTable.ForeignKeys[0].RefTable = CompaniesTable
	RolePermissionsTable.ForeignKeys[0].RefTable = CompaniesTable
	RolePermissionsTable.ForeignKeys[1].RefTable = RolesTable
	RolePermissionsTable.ForeignKeys[2].RefTable = PermissionsTable
	UsersTable.ForeignKeys[0].RefTable = CompaniesTable
}
