// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package resolvers

import (
	"fmt"
	"io"
	"strconv"
)

type CompanyField string

const (
	CompanyFieldCreatedAt  CompanyField = "createdAt"
	CompanyFieldUpdatedAt  CompanyField = "updatedAt"
	CompanyFieldCompanyID  CompanyField = "companyID"
	CompanyFieldName       CompanyField = "name"
	CompanyFieldIsDisabled CompanyField = "isDisabled"
	CompanyFieldOwnerID    CompanyField = "ownerID"
)

var AllCompanyField = []CompanyField{
	CompanyFieldCreatedAt,
	CompanyFieldUpdatedAt,
	CompanyFieldCompanyID,
	CompanyFieldName,
	CompanyFieldIsDisabled,
	CompanyFieldOwnerID,
}

func (e CompanyField) IsValid() bool {
	switch e {
	case CompanyFieldCreatedAt, CompanyFieldUpdatedAt, CompanyFieldCompanyID, CompanyFieldName, CompanyFieldIsDisabled, CompanyFieldOwnerID:
		return true
	}
	return false
}

func (e CompanyField) String() string {
	return string(e)
}

func (e *CompanyField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompanyField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompanyField", str)
	}
	return nil
}

func (e CompanyField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PermissionField string

const (
	PermissionFieldCreatedAt   PermissionField = "createdAt"
	PermissionFieldUpdatedAt   PermissionField = "updatedAt"
	PermissionFieldCompanyID   PermissionField = "companyID"
	PermissionFieldName        PermissionField = "name"
	PermissionFieldDescription PermissionField = "description"
	PermissionFieldRead        PermissionField = "read"
	PermissionFieldWrite       PermissionField = "write"
	PermissionFieldPatch       PermissionField = "patch"
	PermissionFieldDelete      PermissionField = "delete"
)

var AllPermissionField = []PermissionField{
	PermissionFieldCreatedAt,
	PermissionFieldUpdatedAt,
	PermissionFieldCompanyID,
	PermissionFieldName,
	PermissionFieldDescription,
	PermissionFieldRead,
	PermissionFieldWrite,
	PermissionFieldPatch,
	PermissionFieldDelete,
}

func (e PermissionField) IsValid() bool {
	switch e {
	case PermissionFieldCreatedAt, PermissionFieldUpdatedAt, PermissionFieldCompanyID, PermissionFieldName, PermissionFieldDescription, PermissionFieldRead, PermissionFieldWrite, PermissionFieldPatch, PermissionFieldDelete:
		return true
	}
	return false
}

func (e PermissionField) String() string {
	return string(e)
}

func (e *PermissionField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PermissionField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PermissionField", str)
	}
	return nil
}

func (e PermissionField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RoleField string

const (
	RoleFieldCreatedAt   RoleField = "createdAt"
	RoleFieldUpdatedAt   RoleField = "updatedAt"
	RoleFieldCompanyID   RoleField = "companyID"
	RoleFieldName        RoleField = "name"
	RoleFieldDescription RoleField = "description"
)

var AllRoleField = []RoleField{
	RoleFieldCreatedAt,
	RoleFieldUpdatedAt,
	RoleFieldCompanyID,
	RoleFieldName,
	RoleFieldDescription,
}

func (e RoleField) IsValid() bool {
	switch e {
	case RoleFieldCreatedAt, RoleFieldUpdatedAt, RoleFieldCompanyID, RoleFieldName, RoleFieldDescription:
		return true
	}
	return false
}

func (e RoleField) String() string {
	return string(e)
}

func (e *RoleField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleField", str)
	}
	return nil
}

func (e RoleField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RolePermissionField string

const (
	RolePermissionFieldCreatedAt    RolePermissionField = "createdAt"
	RolePermissionFieldUpdatedAt    RolePermissionField = "updatedAt"
	RolePermissionFieldCompanyID    RolePermissionField = "companyID"
	RolePermissionFieldRoleID       RolePermissionField = "roleID"
	RolePermissionFieldPermissionID RolePermissionField = "permissionID"
)

var AllRolePermissionField = []RolePermissionField{
	RolePermissionFieldCreatedAt,
	RolePermissionFieldUpdatedAt,
	RolePermissionFieldCompanyID,
	RolePermissionFieldRoleID,
	RolePermissionFieldPermissionID,
}

func (e RolePermissionField) IsValid() bool {
	switch e {
	case RolePermissionFieldCreatedAt, RolePermissionFieldUpdatedAt, RolePermissionFieldCompanyID, RolePermissionFieldRoleID, RolePermissionFieldPermissionID:
		return true
	}
	return false
}

func (e RolePermissionField) String() string {
	return string(e)
}

func (e *RolePermissionField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RolePermissionField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RolePermissionField", str)
	}
	return nil
}

func (e RolePermissionField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserField string

const (
	UserFieldCreatedAt  UserField = "createdAt"
	UserFieldUpdatedAt  UserField = "updatedAt"
	UserFieldCompanyID  UserField = "companyID"
	UserFieldName       UserField = "name"
	UserFieldEmail      UserField = "email"
	UserFieldMobile     UserField = "mobile"
	UserFieldPassword   UserField = "password"
	UserFieldIsDisabled UserField = "isDisabled"
	UserFieldRoleID     UserField = "roleID"
)

var AllUserField = []UserField{
	UserFieldCreatedAt,
	UserFieldUpdatedAt,
	UserFieldCompanyID,
	UserFieldName,
	UserFieldEmail,
	UserFieldMobile,
	UserFieldPassword,
	UserFieldIsDisabled,
	UserFieldRoleID,
}

func (e UserField) IsValid() bool {
	switch e {
	case UserFieldCreatedAt, UserFieldUpdatedAt, UserFieldCompanyID, UserFieldName, UserFieldEmail, UserFieldMobile, UserFieldPassword, UserFieldIsDisabled, UserFieldRoleID:
		return true
	}
	return false
}

func (e UserField) String() string {
	return string(e)
}

func (e *UserField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserField", str)
	}
	return nil
}

func (e UserField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
