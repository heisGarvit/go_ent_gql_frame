directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Company implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  companyID: ID
  name: String!
  isDisabled: Boolean!
  ownerID: ID
  users: [User!]
  roles: [Role!]
}
"""
A connection to a list of items.
"""
type CompanyConnection {
  """
  A list of edges.
  """
  edges: [CompanyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CompanyEdge {
  """
  The item at the end of the edge.
  """
  node: Company
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Company connections
"""
input CompanyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Companies.
  """
  field: CompanyOrderField!
}
"""
Properties by which Company connections can be ordered.
"""
enum CompanyOrderField {
  id
  createdAt
  updatedAt
}
"""
CompanyWhereInput is used for filtering Company objects.
Input was generated by ent.
"""
input CompanyWhereInput {
  not: CompanyWhereInput
  and: [CompanyWhereInput!]
  or: [CompanyWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  company_id field predicates
  """
  companyID: ID
  companyIDNEQ: ID
  companyIDIn: [ID!]
  companyIDNotIn: [ID!]
  companyIDGT: ID
  companyIDGTE: ID
  companyIDLT: ID
  companyIDLTE: ID
  companyIDIsNil: Boolean
  companyIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  is_disabled field predicates
  """
  isDisabled: Boolean
  isDisabledNEQ: Boolean
  """
  owner_id field predicates
  """
  ownerID: ID
  ownerIDNEQ: ID
  ownerIDIn: [ID!]
  ownerIDNotIn: [ID!]
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  roles edge predicates
  """
  hasRoles: Boolean
  hasRolesWith: [RoleWhereInput!]
}
"""
CreateCompanyInput is used for create Company object.
Input was generated by ent.
"""
input CreateCompanyInput {
  createdAt: Time
  updatedAt: Time
  companyID: ID
  name: String!
  isDisabled: Boolean
  ownerID: ID
  userIDs: [ID!]
  roleIDs: [ID!]
}
"""
CreatePermissionInput is used for create Permission object.
Input was generated by ent.
"""
input CreatePermissionInput {
  createdAt: Time
  updatedAt: Time
  companyID: ID
  name: String!
  description: String!
  read: Boolean
  write: Boolean
  patch: Boolean
  delete: Boolean
}
"""
CreateRoleInput is used for create Role object.
Input was generated by ent.
"""
input CreateRoleInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  description: String!
  companyID: ID
  permissionIDs: [ID!]
}
"""
CreateRolePermissionInput is used for create RolePermission object.
Input was generated by ent.
"""
input CreateRolePermissionInput {
  createdAt: Time
  updatedAt: Time
  companyID: ID
  roleID: ID
  permissionID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  name: String
  email: String!
  mobile: String!
  password: String!
  isDisabled: Boolean
  roleID: ID
  companyID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "project/src/models/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Permission implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  companyID: ID
  name: String!
  description: String!
  read: Boolean!
  write: Boolean!
  patch: Boolean!
  delete: Boolean!
}
"""
A connection to a list of items.
"""
type PermissionConnection {
  """
  A list of edges.
  """
  edges: [PermissionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PermissionEdge {
  """
  The item at the end of the edge.
  """
  node: Permission
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Permission connections
"""
input PermissionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Permissions.
  """
  field: PermissionOrderField!
}
"""
Properties by which Permission connections can be ordered.
"""
enum PermissionOrderField {
  id
  createdAt
  updatedAt
}
"""
PermissionWhereInput is used for filtering Permission objects.
Input was generated by ent.
"""
input PermissionWhereInput {
  not: PermissionWhereInput
  and: [PermissionWhereInput!]
  or: [PermissionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  company_id field predicates
  """
  companyID: ID
  companyIDNEQ: ID
  companyIDIn: [ID!]
  companyIDNotIn: [ID!]
  companyIDGT: ID
  companyIDGTE: ID
  companyIDLT: ID
  companyIDLTE: ID
  companyIDIsNil: Boolean
  companyIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  read field predicates
  """
  read: Boolean
  readNEQ: Boolean
  """
  write field predicates
  """
  write: Boolean
  writeNEQ: Boolean
  """
  patch field predicates
  """
  patch: Boolean
  patchNEQ: Boolean
  """
  delete field predicates
  """
  delete: Boolean
  deleteNEQ: Boolean
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
}
type Role implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  companyID: ID
  name: String!
  description: String!
  company: Company
  permissions: [RolePermission!]
}
"""
A connection to a list of items.
"""
type RoleConnection {
  """
  A list of edges.
  """
  edges: [RoleEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RoleEdge {
  """
  The item at the end of the edge.
  """
  node: Role
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Role connections
"""
input RoleOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Roles.
  """
  field: RoleOrderField!
}
"""
Properties by which Role connections can be ordered.
"""
enum RoleOrderField {
  id
  createdAt
  updatedAt
}
type RolePermission implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  companyID: ID
  roleID: ID
  permissionID: ID
  company: Company
  role: Role
  permission: Permission
}
"""
A connection to a list of items.
"""
type RolePermissionConnection {
  """
  A list of edges.
  """
  edges: [RolePermissionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RolePermissionEdge {
  """
  The item at the end of the edge.
  """
  node: RolePermission
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for RolePermission connections
"""
input RolePermissionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order RolePermissions.
  """
  field: RolePermissionOrderField!
}
"""
Properties by which RolePermission connections can be ordered.
"""
enum RolePermissionOrderField {
  id
  createdAt
  updatedAt
}
"""
RolePermissionWhereInput is used for filtering RolePermission objects.
Input was generated by ent.
"""
input RolePermissionWhereInput {
  not: RolePermissionWhereInput
  and: [RolePermissionWhereInput!]
  or: [RolePermissionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  company_id field predicates
  """
  companyID: ID
  companyIDNEQ: ID
  companyIDIn: [ID!]
  companyIDNotIn: [ID!]
  companyIDIsNil: Boolean
  companyIDNotNil: Boolean
  """
  role_id field predicates
  """
  roleID: ID
  roleIDNEQ: ID
  roleIDIn: [ID!]
  roleIDNotIn: [ID!]
  roleIDIsNil: Boolean
  roleIDNotNil: Boolean
  """
  permission_id field predicates
  """
  permissionID: ID
  permissionIDNEQ: ID
  permissionIDIn: [ID!]
  permissionIDNotIn: [ID!]
  permissionIDIsNil: Boolean
  permissionIDNotNil: Boolean
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  role edge predicates
  """
  hasRole: Boolean
  hasRoleWith: [RoleWhereInput!]
  """
  permission edge predicates
  """
  hasPermission: Boolean
  hasPermissionWith: [PermissionWhereInput!]
}
"""
RoleWhereInput is used for filtering Role objects.
Input was generated by ent.
"""
input RoleWhereInput {
  not: RoleWhereInput
  and: [RoleWhereInput!]
  or: [RoleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  company_id field predicates
  """
  companyID: ID
  companyIDNEQ: ID
  companyIDIn: [ID!]
  companyIDNotIn: [ID!]
  companyIDIsNil: Boolean
  companyIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
  """
  permissions edge predicates
  """
  hasPermissions: Boolean
  hasPermissionsWith: [RolePermissionWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateCompanyInput is used for update Company object.
Input was generated by ent.
"""
input UpdateCompanyInput {
  updatedAt: Time
  companyID: ID
  clearCompanyID: Boolean
  name: String
  isDisabled: Boolean
  ownerID: ID
  clearOwnerID: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addRoleIDs: [ID!]
  removeRoleIDs: [ID!]
  clearRoles: Boolean
}
"""
UpdatePermissionInput is used for update Permission object.
Input was generated by ent.
"""
input UpdatePermissionInput {
  updatedAt: Time
  companyID: ID
  clearCompanyID: Boolean
  name: String
  description: String
  read: Boolean
  write: Boolean
  patch: Boolean
  delete: Boolean
}
"""
UpdateRoleInput is used for update Role object.
Input was generated by ent.
"""
input UpdateRoleInput {
  updatedAt: Time
  name: String
  description: String
  companyID: ID
  clearCompany: Boolean
  addPermissionIDs: [ID!]
  removePermissionIDs: [ID!]
  clearPermissions: Boolean
}
"""
UpdateRolePermissionInput is used for update RolePermission object.
Input was generated by ent.
"""
input UpdateRolePermissionInput {
  updatedAt: Time
  companyID: ID
  clearCompany: Boolean
  roleID: ID
  clearRole: Boolean
  permissionID: ID
  clearPermission: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  name: String
  clearName: Boolean
  email: String
  mobile: String
  password: String
  isDisabled: Boolean
  roleID: ID
  clearRoleID: Boolean
  companyID: ID
  clearCompany: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  companyID: ID
  name: String
  email: String!
  mobile: String!
  isDisabled: Boolean!
  roleID: ID
  company: Company
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  id
  createdAt
  updatedAt
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  company_id field predicates
  """
  companyID: ID
  companyIDNEQ: ID
  companyIDIn: [ID!]
  companyIDNotIn: [ID!]
  companyIDIsNil: Boolean
  companyIDNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  mobile field predicates
  """
  mobile: String
  mobileNEQ: String
  mobileIn: [String!]
  mobileNotIn: [String!]
  mobileGT: String
  mobileGTE: String
  mobileLT: String
  mobileLTE: String
  mobileContains: String
  mobileHasPrefix: String
  mobileHasSuffix: String
  mobileEqualFold: String
  mobileContainsFold: String
  """
  is_disabled field predicates
  """
  isDisabled: Boolean
  isDisabledNEQ: Boolean
  """
  role_id field predicates
  """
  roleID: ID
  roleIDNEQ: ID
  roleIDIn: [ID!]
  roleIDNotIn: [ID!]
  roleIDGT: ID
  roleIDGTE: ID
  roleIDLT: ID
  roleIDLTE: ID
  roleIDIsNil: Boolean
  roleIDNotNil: Boolean
  """
  company edge predicates
  """
  hasCompany: Boolean
  hasCompanyWith: [CompanyWhereInput!]
}
