// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project/src/models/ent/company"
	"project/src/models/ent/permission"
	"project/src/models/ent/predicate"
	"project/src/models/ent/role"
	"project/src/models/ent/rolepermission"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// RolePermissionUpdate is the builder for updating RolePermission entities.
type RolePermissionUpdate struct {
	config
	hooks     []Hook
	mutation  *RolePermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RolePermissionUpdate builder.
func (rpu *RolePermissionUpdate) Where(ps ...predicate.RolePermission) *RolePermissionUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpu *RolePermissionUpdate) SetUpdatedAt(t time.Time) *RolePermissionUpdate {
	rpu.mutation.SetUpdatedAt(t)
	return rpu
}

// SetCompanyID sets the "company_id" field.
func (rpu *RolePermissionUpdate) SetCompanyID(u uuid.UUID) *RolePermissionUpdate {
	rpu.mutation.SetCompanyID(u)
	return rpu
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (rpu *RolePermissionUpdate) SetNillableCompanyID(u *uuid.UUID) *RolePermissionUpdate {
	if u != nil {
		rpu.SetCompanyID(*u)
	}
	return rpu
}

// ClearCompanyID clears the value of the "company_id" field.
func (rpu *RolePermissionUpdate) ClearCompanyID() *RolePermissionUpdate {
	rpu.mutation.ClearCompanyID()
	return rpu
}

// SetRoleID sets the "role_id" field.
func (rpu *RolePermissionUpdate) SetRoleID(u uuid.UUID) *RolePermissionUpdate {
	rpu.mutation.SetRoleID(u)
	return rpu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (rpu *RolePermissionUpdate) SetNillableRoleID(u *uuid.UUID) *RolePermissionUpdate {
	if u != nil {
		rpu.SetRoleID(*u)
	}
	return rpu
}

// ClearRoleID clears the value of the "role_id" field.
func (rpu *RolePermissionUpdate) ClearRoleID() *RolePermissionUpdate {
	rpu.mutation.ClearRoleID()
	return rpu
}

// SetPermissionID sets the "permission_id" field.
func (rpu *RolePermissionUpdate) SetPermissionID(u uuid.UUID) *RolePermissionUpdate {
	rpu.mutation.SetPermissionID(u)
	return rpu
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rpu *RolePermissionUpdate) SetNillablePermissionID(u *uuid.UUID) *RolePermissionUpdate {
	if u != nil {
		rpu.SetPermissionID(*u)
	}
	return rpu
}

// ClearPermissionID clears the value of the "permission_id" field.
func (rpu *RolePermissionUpdate) ClearPermissionID() *RolePermissionUpdate {
	rpu.mutation.ClearPermissionID()
	return rpu
}

// SetCompany sets the "company" edge to the Company entity.
func (rpu *RolePermissionUpdate) SetCompany(c *Company) *RolePermissionUpdate {
	return rpu.SetCompanyID(c.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (rpu *RolePermissionUpdate) SetRole(r *Role) *RolePermissionUpdate {
	return rpu.SetRoleID(r.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (rpu *RolePermissionUpdate) SetPermission(p *Permission) *RolePermissionUpdate {
	return rpu.SetPermissionID(p.ID)
}

// Mutation returns the RolePermissionMutation object of the builder.
func (rpu *RolePermissionUpdate) Mutation() *RolePermissionMutation {
	return rpu.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (rpu *RolePermissionUpdate) ClearCompany() *RolePermissionUpdate {
	rpu.mutation.ClearCompany()
	return rpu
}

// ClearRole clears the "role" edge to the Role entity.
func (rpu *RolePermissionUpdate) ClearRole() *RolePermissionUpdate {
	rpu.mutation.ClearRole()
	return rpu
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (rpu *RolePermissionUpdate) ClearPermission() *RolePermissionUpdate {
	rpu.mutation.ClearPermission()
	return rpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RolePermissionUpdate) Save(ctx context.Context) (int, error) {
	rpu.defaults()
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RolePermissionUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RolePermissionUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RolePermissionUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpu *RolePermissionUpdate) defaults() {
	if _, ok := rpu.mutation.UpdatedAt(); !ok {
		v := rolepermission.UpdateDefaultUpdatedAt()
		rpu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rpu *RolePermissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RolePermissionUpdate {
	rpu.modifiers = append(rpu.modifiers, modifiers...)
	return rpu
}

func (rpu *RolePermissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rolepermission.Table, rolepermission.Columns, sqlgraph.NewFieldSpec(rolepermission.FieldID, field.TypeUUID))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.UpdatedAt(); ok {
		_spec.SetField(rolepermission.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpu.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.CompanyTable,
			Columns: []string{rolepermission.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.CompanyTable,
			Columns: []string{rolepermission.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// RolePermissionUpdateOne is the builder for updating a single RolePermission entity.
type RolePermissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RolePermissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (rpuo *RolePermissionUpdateOne) SetUpdatedAt(t time.Time) *RolePermissionUpdateOne {
	rpuo.mutation.SetUpdatedAt(t)
	return rpuo
}

// SetCompanyID sets the "company_id" field.
func (rpuo *RolePermissionUpdateOne) SetCompanyID(u uuid.UUID) *RolePermissionUpdateOne {
	rpuo.mutation.SetCompanyID(u)
	return rpuo
}

// SetNillableCompanyID sets the "company_id" field if the given value is not nil.
func (rpuo *RolePermissionUpdateOne) SetNillableCompanyID(u *uuid.UUID) *RolePermissionUpdateOne {
	if u != nil {
		rpuo.SetCompanyID(*u)
	}
	return rpuo
}

// ClearCompanyID clears the value of the "company_id" field.
func (rpuo *RolePermissionUpdateOne) ClearCompanyID() *RolePermissionUpdateOne {
	rpuo.mutation.ClearCompanyID()
	return rpuo
}

// SetRoleID sets the "role_id" field.
func (rpuo *RolePermissionUpdateOne) SetRoleID(u uuid.UUID) *RolePermissionUpdateOne {
	rpuo.mutation.SetRoleID(u)
	return rpuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (rpuo *RolePermissionUpdateOne) SetNillableRoleID(u *uuid.UUID) *RolePermissionUpdateOne {
	if u != nil {
		rpuo.SetRoleID(*u)
	}
	return rpuo
}

// ClearRoleID clears the value of the "role_id" field.
func (rpuo *RolePermissionUpdateOne) ClearRoleID() *RolePermissionUpdateOne {
	rpuo.mutation.ClearRoleID()
	return rpuo
}

// SetPermissionID sets the "permission_id" field.
func (rpuo *RolePermissionUpdateOne) SetPermissionID(u uuid.UUID) *RolePermissionUpdateOne {
	rpuo.mutation.SetPermissionID(u)
	return rpuo
}

// SetNillablePermissionID sets the "permission_id" field if the given value is not nil.
func (rpuo *RolePermissionUpdateOne) SetNillablePermissionID(u *uuid.UUID) *RolePermissionUpdateOne {
	if u != nil {
		rpuo.SetPermissionID(*u)
	}
	return rpuo
}

// ClearPermissionID clears the value of the "permission_id" field.
func (rpuo *RolePermissionUpdateOne) ClearPermissionID() *RolePermissionUpdateOne {
	rpuo.mutation.ClearPermissionID()
	return rpuo
}

// SetCompany sets the "company" edge to the Company entity.
func (rpuo *RolePermissionUpdateOne) SetCompany(c *Company) *RolePermissionUpdateOne {
	return rpuo.SetCompanyID(c.ID)
}

// SetRole sets the "role" edge to the Role entity.
func (rpuo *RolePermissionUpdateOne) SetRole(r *Role) *RolePermissionUpdateOne {
	return rpuo.SetRoleID(r.ID)
}

// SetPermission sets the "permission" edge to the Permission entity.
func (rpuo *RolePermissionUpdateOne) SetPermission(p *Permission) *RolePermissionUpdateOne {
	return rpuo.SetPermissionID(p.ID)
}

// Mutation returns the RolePermissionMutation object of the builder.
func (rpuo *RolePermissionUpdateOne) Mutation() *RolePermissionMutation {
	return rpuo.mutation
}

// ClearCompany clears the "company" edge to the Company entity.
func (rpuo *RolePermissionUpdateOne) ClearCompany() *RolePermissionUpdateOne {
	rpuo.mutation.ClearCompany()
	return rpuo
}

// ClearRole clears the "role" edge to the Role entity.
func (rpuo *RolePermissionUpdateOne) ClearRole() *RolePermissionUpdateOne {
	rpuo.mutation.ClearRole()
	return rpuo
}

// ClearPermission clears the "permission" edge to the Permission entity.
func (rpuo *RolePermissionUpdateOne) ClearPermission() *RolePermissionUpdateOne {
	rpuo.mutation.ClearPermission()
	return rpuo
}

// Where appends a list predicates to the RolePermissionUpdate builder.
func (rpuo *RolePermissionUpdateOne) Where(ps ...predicate.RolePermission) *RolePermissionUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *RolePermissionUpdateOne) Select(field string, fields ...string) *RolePermissionUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated RolePermission entity.
func (rpuo *RolePermissionUpdateOne) Save(ctx context.Context) (*RolePermission, error) {
	rpuo.defaults()
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RolePermissionUpdateOne) SaveX(ctx context.Context) *RolePermission {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RolePermissionUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RolePermissionUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpuo *RolePermissionUpdateOne) defaults() {
	if _, ok := rpuo.mutation.UpdatedAt(); !ok {
		v := rolepermission.UpdateDefaultUpdatedAt()
		rpuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rpuo *RolePermissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RolePermissionUpdateOne {
	rpuo.modifiers = append(rpuo.modifiers, modifiers...)
	return rpuo
}

func (rpuo *RolePermissionUpdateOne) sqlSave(ctx context.Context) (_node *RolePermission, err error) {
	_spec := sqlgraph.NewUpdateSpec(rolepermission.Table, rolepermission.Columns, sqlgraph.NewFieldSpec(rolepermission.FieldID, field.TypeUUID))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RolePermission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolepermission.FieldID)
		for _, f := range fields {
			if !rolepermission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolepermission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(rolepermission.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpuo.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.CompanyTable,
			Columns: []string{rolepermission.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.CompanyTable,
			Columns: []string{rolepermission.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.RoleTable,
			Columns: []string{rolepermission.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.PermissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.PermissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rolepermission.PermissionTable,
			Columns: []string{rolepermission.PermissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rpuo.modifiers...)
	_node = &RolePermission{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepermission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
